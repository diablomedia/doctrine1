parameters:
    bootstrap: %rootDir%/../../../phpstan-bootstrap.php
    ignoreErrors:
        #########
        # Level 0
        #########
        # These two methods don't exist (anywhere in Doctrine), this sequence adapter is probably broken
        - '#Call to an undefined method Doctrine_Sequence_Db2::_connect\(\)\.#'
        - '#Call to an undefined method Doctrine_Sequence_Db2::lastSequenceId\(\)\.#'
        # This method only exists on Doctrine_Query_Condition
        - '#Call to an undefined method Doctrine_Query_Set::parseLiteralValue\(\)\.#'
        # These methods are defined on Doctrine_Query, and probably should be made abstract in Doctrine_Query_Abstract,
        # but that would break anything extending Doctrine_Query_Abstract that doesn't define the method (like Doctrine_RawSql)
        - '#Call to an undefined method Doctrine_Query_Abstract::isSubquery\(\)\.#'
        - '#Call to an undefined method Doctrine_Query_Abstract::copy\(\)\.#'
        # Similar to above, this is defined in all sub-classes of Doctrine_Query_Condition, but not in the abstract class
        # itself, so should be an abstract method, but that would break any code outside of Doctrine that extends this
        - '#Call to an undefined method Doctrine_Query_Condition::load\(\)\.#'
        # Both Doctrine_Expression_Mysql and Doctrine_Expression_Pgsql call this, but doesn't seem to exist anywhere in
        # the Doctrine codebase. Both methods it appears in are marked as "experimental"
        - '#Call to an undefined method Doctrine_Expression_.+sql::patternEscapeString\(\)\.#'
        # These two exception classes are found in the same "experimental" method as the above error
        - '#Instantiated class Doctrine_Expression_.+sql_Exception not found\.#'
        # This method does not exist anywhere in Doctrine
        - '#Call to an undefined method Doctrine_Search_Indexer_Dir::indexFile\(\)\.#'
        # Doctrine_Query_Abstract defines this with just one parameter but Doctrine_Query (which extends Doctrine_Query_Abstract)
        # defines it with a second parameter ($limitSubQuery). Since this is called from Doctrine_Query_Abstract, the abstract
        # signature should probably be changed, but that could break other implementations.
        - '#Method Doctrine_Query_Abstract::getSqlQuery\(\) invoked with 2 parameters, 0-1 required\.#'
        # In Doctrine_Column, not sure the intent here, seems like $field was to be passed to filter which enum value was sent?
        # Either way, this method does not accept a parameter.
        - '#Method Doctrine_Column::getEnumValues\(\) invoked with 1 parameter, 0 required\.#'
        # In Doctrine_Cli_Formatter:81, this seems like a bug, the format probably has a type-o, but not sure what the intent was
        # php > echo sprintf(">> %-$9s %s", 'testing', 'another test');
        #   >> 9s another test
        - '#Call to sprintf contains 1 placeholder, 2 values given\.#'
        # This is probably intentional since it's a mock and doesn't want to have the same functionality as a true connection
        - '#Doctrine_Connection_Mock::__construct\(\) does not call parent constructor from Doctrine_Connection\.#'
        - '#Constructor of class Doctrine_Connection_Mock has an unused parameter \$.+\.#'
        # Not really harmful or anything, none of the classes that ultimately extend Doctrine_Connection have either param
        # in their signature. Even other extending classes shouldn't be affected if removed from signature, but just ignoring
        - '#Constructor of class Doctrine_Connection has an unused parameter \$user\.#'
        - '#Constructor of class Doctrine_Connection has an unused parameter \$pass\.#'
        # These aren't implemented yet (throw an exception stating such)
        - '#Constructor of class Doctrine_Node_MaterializedPath_.+Iterator has an unused parameter \$(node|opts)\.#'
        # This might be a type-o, not sure. Doctrine_Connection has a __get magic method that returns various properties, most of
        # them defined in the $modules property. There's an "export" property defined there, but not "exported"
        - '#Access to an undefined property Doctrine_Connection::\$exported\.#'
        # Don't really see this referenced anywhere other than being set in a few classes (These two and on a "conn" property in Doctrine_DataDict_Pgsql)
        # Doesn't appear to be used with __get or __set either (the Sequence class or its parents don't define any of those)
        - '#Access to an undefined property Doctrine_Sequence::\$warnings\.#'
        - '#Access to an undefined property Doctrine_Sequence_Mssql::\$warnings\.#'
        # This is probably supposed to be `$this->conn->string_quoting` as the Doctrine_Connection class does have that
        # property (through __get), and does look like it contains an "escape_pattern" key
        - '#Access to an undefined property Doctrine_Formatter::\$string_quoting\.#'
        # This one is on Doctrine_Connection as well (through __get)
        - '#Access to an undefined property Doctrine_Formatter::\$wildcards\.#'
        # This one is probably supposed to be $_preQueried, not $_preQuery, which exists on Doctrine_Query_Abstract that Doctrine_RawSql extends
        # Didn't change as I don't know what the effect would be
        - '#Access to an undefined property Doctrine_RawSql::\$_preQuery\.#'
        # This is defined in Doctrine_Hydrator, but not Doctrine_Hydrator_Abstract (which both Doctrine_Hydrator and Doctrine_Hydrator_Graph extend)
        # Should probably be defined in the Abstract
        - '#Access to an undefined property Doctrine_Hydrator_Graph::\$_rootAlias\.#'

        #########
        # Level 1
        #########
        # This isset check could probably be removed (Doctrine_I18n:124) because the method that is called to set `$others` already does an
        # isset check on the value it returns and throws an exception if it's not set
        - '#Variable \$others in isset\(\) always exists and is not nullable\.#'
        # The block for this is a bit confusing (Doctrine_Connection_UnitOfWork:831), but $rootRecord is set on the first
        # iteration of the foreach loop, and then referenced in each subsequent iteration. Assuming this is intentional
        - '#Variable \$rootRecord might not be defined\.#'
        # Not really sure what a satisfactory default value for $oci_length should be, seems that it should maybe be set to the $length parameter
        # but not certain (Doctrine_Adapter_Statement_Oracle:175)
        - '#Variable \$oci_length might not be defined\.#'
        # This one would require some testing to see if it can be predefined, as it's predefined as "null" in a specific case, but undefined otherwise
        # (though is_null will return true for undefined variables (but throws a notice), so perhaps it doesn't matter if it's set to null.)
        # Doctrine_Hydrator_Graph:131
        - '#Variable \$activeRootIdentifier might not be defined\.#'
        # These four are only used if the $autoincrement var is set to "true", and if it's set to "true", they get defined.
        # In Doctrine_Migration_Base:278
        - '#Variable \$autoincrementColumn might not be defined\.#'
        - '#Variable \$autoincrementType might not be defined\.#'
        - '#Variable \$autoincrementLength might not be defined\.#'
        - '#Variable \$autoincrementOptions might not be defined\.#'
        # These three happen several times in Doctrine_Node_NestedSet and each are structured the same way. The docblocks say something to the
        # effect of "gets record of ... or empty record". The way the code is now, they return null (undefined variable) if the record doesn't exist,
        # not an empty record. Could return an empty Doctrine_Record here, but not sure how that would affect behavior.
        - '#Variable \$sibling might not be defined\.#'
        - '#Variable \$child might not be defined\.#'
        # (this one belongs to the previous group as well, not easy to tell phpstan to ignore specific errors in specific files)
        # This one shows up in both Doctrine_Query and Doctrine_RawSql and is pretty much the same situation. I'm not sure what a good default
        # for parent should be (though in this case it's probably being passed as null in all situations since it could be undefined)
        - '#Variable \$parent might not be defined\.#'
        # This one refers specifically to Doctrine_Connection:1040. In some cases $stmt is defined in an if block with no else, so would probably be safe
        # to set to null in this case
        - '#Variable \$stmt might not be defined\.#'
        # Similar to the one above in Doctrine_Connection:1075
        - '#Variable \$count might not be defined\.#'
        # This, in Doctrine_RawSql:160|167|168|173, is intentional when tokenizing so that data is appended to the previous $type (during loop)
        - '#Variable \$type might not be defined\.#'
        # Doctrine_Relation_Parser:512, $table must always be set since nobody that has cared has complained about this, but seems like it should
        # either be set to an initial value, or have an isset() check around it. There's a comment questioning if it should be $table or $this->table
        - '#Variable \$table might not be defined\.#'
        # Doctrine_Query_Check:155, this one doesn't really matter much, as it'll just return null/undefined if it doesn't get set, could initialize as null
        # perhaps to make phpstan happy
        - '#Variable \$func might not be defined\.#'
        # In Doctrine_Table:506, seems to change $this->_identifier from an array to the last value of that array, intentional?  $pk won't be defined if
        # $this->_identifier is empty
        - '#Variable \$pk might not be defined\.#'
        # In Doctrine_Query_Tokenizer:90, this seems to be intentional to add parts of the query to the previous type until a new token is found
        - '#Variable \$p might not be defined\.#'
        # Doctrine_Query:981|988|990|1195, not sure what good defaults should be (assuming blank string for most of these is what's happening now)
        - '#Variable \$tableAlias might not be defined\.#'
        - '#Variable \$componentAlias might not be defined\.#'
        - '#Variable \$queryComponentsBefore might not be defined\.#'

        #########
        # Level 2
        #########
        # This exists on all of the Validator classes that extend Doctrine_Validator_Driver, but not the Driver class itself. Should probably be
        # turned into an abstract class with the Validate method defined as abstract, but would break API
        - '#Call to an undefined method Doctrine_Validator_Driver::validate\(\)\.#'
        # From  Doctrine_IntegrityMapper, this method does not exist, and Doctrine_Manager doesn't appear to have any __call magic method implemented
        # (nor its parents).  This code isn't currently touched by tests, assuming it's broken.
        # (https://codecov.io/gh/diablomedia/doctrine1/src/master/lib/Doctrine/IntegrityMapper.php#L56)
        - '#Call to an undefined method Doctrine_Manager::getDeleteActions\(\)\.#'
        # There is one Doctrine_Connection subclass that has 6 parameters (Doctrine_Connection_Mssql), could perhaps branch this code
        # and detect for that particular class and call it with 6 parameters in that case, otherwise with 4
        # Doctrine_Query:1375
        - '#Method Doctrine_Connection::modifyLimitQuery\(\) invoked with 6 parameters, 1-4 required\.#'
        # In Doctrine_Connection:1107, I don't see this defined anywhere, or used outside of this particular case
        - '#Access to an undefined property Exception::\$errorInfo\.#'
        # In Doctrine_Collection_Iterator_Expandable:40, no static references to a function named "expand" in the codebase, and don't see any __call methods
        # on Doctrine_Collection or its parents.
        - '#Call to an undefined method Doctrine_Collection::expand\(\)\.#'
        # In Doctrine_Export:744, all extending classes of Doctrine_DataDict implement this method, but Doctrine_DataDict does not (should probably be added
        # as an abstract definition, which does break public API)
        - '#Call to an undefined method Doctrine_DataDict::getNativeDeclaration\(\)\.#'
        # In Doctrine_Import_Sqlite:139, similar to above, the extending classes define this method but base class does not
        - '#Call to an undefined method Doctrine_DataDict::getPortableDeclaration\(\)\.#'
        # In Doctrine_Query:905, this method doesn't appear to exist on Doctrine_Query or its parents, not covered by tests at all, probably broken
        - '#Call to an undefined method Doctrine_Query::getQuery\(\)\.#'
        # In Doctrine_Import_Sqlite:78, this function only seems to exist on the Doctrine_Formatter class, and I don't see any path from Doctrine_Connection
        # to Doctrine_Formatter that would work here (no __call in Doctrine_Connection), not covered by tests
        - '#Call to an undefined method Doctrine_Connection::fixSequenceName\(\)\.#'
        # In Doctrine_Export_Mssql:346|375, similar to above, method exists on Doctrine_Formatter, not Doctrine_Connection (or any subclasses of)
        # not covered by tests, probably broken.
        - '#Call to an undefined method Doctrine_Connection::getSequenceName\(\)\.#'
        # In Doctrine_Template_Listener_Sluggable:108, this is wrapped by a function_exists call, and looks like it's built so that a Doctrine_Record
        # object can define that method to implement its own version of slug generation if desired by the implementer.
        - '#Call to an undefined method Doctrine_Record::getUniqueSlug\(\)\.#'
        # In Doctrine_Query_Orderby:107|162, these are both wrapped by a method_exists call, and this method is only defined on the
        # Doctrine_Connection_Mssql class, should be safe.
        - '#Call to an undefined method Doctrine_Connection::modifyOrderByColumn\(\)\.#'
        # Both of these are in the "Experimental" Doctrine_Expression_Mysql|Pgsql blocks, not covered by tests. The methods exist on
        # Doctrine_Formatter, not Doctrine_Connection
        - '#Call to an undefined method Doctrine_Connection::escapePattern\(\)\.#'
        - '#Call to an undefined method Doctrine_Connection::escape\(\)\.#'
        # In Doctrine_Query_Abstract:2099, most of the classes that extend Doctrine_Query_Part implement this parse method but the base
        # class does not. Should probably be made into an abstract method definition on that class (but would break API)
        - '#Call to an undefined method Doctrine_Query_Part::parse\(\)\.#'

        #########
        # Level 3
        #########
        # This one calls execute with the HYDRATE_ARRAY constant, which should return an array
        - '#Method Doctrine_Query::fetchArray\(\) should return array but returns array\|Doctrine_Collection\.#'
        # This one does not allow specifying the hydration mode, so should default to Doctrine_Collection (record hydration)
        - '#Method Doctrine_IntegrityMapper::buildIntegrityRelationQuery\(\) should return Doctrine_Collection but returns array\|Doctrine_Collection\.#'

        #########
        # Level 4
        #########
        # Most of these casts would be unnecessary if scalar type hints were used on these function parameters, probably worth looking
        # into later (can't do non-array type hints until PHP 7.0 anyhow)
        - '#Casting to array something that.s already array\.#'
        - '#Casting to int something that.s already int\.#'
        - '#Casting to string something that.s already string\.#'
        - '#Casting to bool something that.s already bool\.#'
        # This one only happens in Doctrine_Hydrator:122 as of this writing, in this case it seems unnecessary because as far as I can
        # tell, the value will always be a string. However, it's possible that maybe in some extending classes this ends up being an
        # object, so leaving as-is.
        - '#Call to function is_object\(\) will always evaluate to false\.#'
        # Most of these checks are validating the argument coming into the function to be sure it isn't "null"/unset. I don't want to add
        # "null" to the allowed types for these, as usually these will just coerce the value or set some default when "null" is passed (sometimes
        # an exception is thrown)
        - '#Call to function is_null\(\) will always evaluate to false\.#'
        - '#Strict comparison using (!|=)== between (string|array|Doctrine_Record_Generator|int|bool\|Doctrine_Cache_Interface) and null will always evaluate to (true|false)\.#'
        # These are done for similar reasons, but comparing to false. These are probably rarely needed, since a ture "false" isn't returned by the
        # methods setting these values
        - '#Strict comparison using !== between (Doctrine_Cache_Interface\|true|string) and false will always evaluate to true\.#'